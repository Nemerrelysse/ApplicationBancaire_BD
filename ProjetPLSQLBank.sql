--========================================
--////// LOT 1 \\\\\\
--========================================


DROP TABLE BANQUE CASCADE CONSTRAINT;
DROP TABLE OPERATION CASCADE CONSTRAINT;
DROP TABLE COMPTE CASCADE CONSTRAINT;
DROP TABLE TYPECOMPTE CASCADE CONSTRAINT;
DROP TABLE AUDITDECOUVERT CASCADE CONSTRAINT;

--*Création table BANQUE*
CREATE TABLE BANQUE
(
    IdBanque INTEGER,
    LibelleBanque VARCHAR(50) NOT NULL,
    CPBanque CHAR(5) NOT NULL,
    AdresseBanque VARCHAR(50) NOT NULL,
    VilleBanque VARCHAR(30) NOT NULL
);

DROP SEQUENCE SeqIdBanque;
CREATE SEQUENCE SeqIdBanque START WITH 10000 INCREMENT BY 10;
ALTER TABLE BANQUE ADD CONSTRAINT PK_IdBanque PRIMARY KEY(IdBanque);
ALTER TABLE BANQUE ADD CONSTRAINT U_LibelleBanque UNIQUE(LibelleBanque);

--*Création table AUDITDECOUVERT*
CREATE TABLE AUDITDECOUVERT
(
    IdAudit INTEGER,
    IdCompte INTEGER NOT NULL,
    LibelleCompte VARCHAR(30) NOT NULL,
    SoldeCompte NUMBER(10,2) NOT NULL,
    DecouvertAutorise NUMBER(10,2) NOT NULL,
    Depassement NUMBER(10,2) NOT NULL,
    IdDerniereOperation INTEGER NOT NULL
);

DROP SEQUENCE SeqAudit;
CREATE SEQUENCE SeqIdAudit;

--*Création table TYPECOMPTE*
CREATE TABLE TYPECOMPTE
(
    IdTypeCompte INTEGER,
    LibelleTypeCompte VARCHAR(30) NOT NULL
);

DROP SEQUENCE SeqIdTypeCompte;
CREATE SEQUENCE SeqIdTypeCompte;
ALTER TABLE TYPECOMPTE ADD CONSTRAINT PK_IdTypeCompte PRIMARY KEY(IdTypeCompte);

--*Création table OPERATION*
CREATE TABLE OPERATION
(
    IdOperation INTEGER,
    DateOperation DATE NOT NULL,
    MontantOperation NUMBER(10,2) NOT NULL
);

DROP SEQUENCE SeqIdOperation;
CREATE SEQUENCE SeqIdOperation;
ALTER TABLE OPERATION ADD CONSTRAINT PK_IdOperation PRIMARY KEY(IdOperation);

--*Création table COMPTE*
CREATE TABLE COMPTE
(
    IdCompte INTEGER,
    LibelleCompte VARCHAR(30) NOT NULL,
    SoldeCompte NUMBER(10,2) NOT NULL,
    DecouvertAutorise NUMBER(10,2) NOT NULL,
    DateOuvertureCompte DATE NOT NULL
);

DROP SEQUENCE SeqIdCompte;
CREATE SEQUENCE SeqIdCompte;
ALTER TABLE COMPTE ADD CONSTRAINT PK_IdCompte PRIMARY KEY(IdCompte);
ALTER TABLE COMPTE ADD CONSTRAINT U_LibelleCompte UNIQUE(LibelleCompte);

--*Ajout de clés étrangère dans COMPTE et OPERATION*
ALTER TABLE COMPTE ADD (IdBanque INTEGER);
ALTER TABLE COMPTE MODIFY (IdBanque INTEGER CONSTRAINT FK_IdBanque REFERENCES BANQUE(IdBanque));
ALTER TABLE COMPTE MODIFY (IdBanque NOT NULL);
ALTER TABLE COMPTE ADD (IdTypeCompte INTEGER);
ALTER TABLE COMPTE MODIFY (IdTypeCompte INTEGER CONSTRAINT FK_IdTypeCompte REFERENCES TYPECOMPTE(IdTypeCompte));
ALTER TABLE COMPTE MODIFY (IdTypeCompte NOT NULL);
ALTER TABLE OPERATION ADD (IdCompte INTEGER);
ALTER TABLE OPERATION MODIFY (IdCompte INTEGER CONSTRAINT FK_IdCompte REFERENCES COMPTE(IdCompte));
ALTER TABLE OPERATION MODIFY (IdCompte NOT NULL);

CREATE OR REPLACE PROCEDURE AJOUTNOUVOPERATION (V_Idcompte INTEGER, V_Value NUMBER)
IS
BEGIN
INSERT INTO OPERATION (IdOperation, DateOperation, MontantOperation, IdCompte) VALUES (SeqIdOperation.nextval, SYSDATE, V_Value, V_IdCompte);
END;
/


CREATE OR REPLACE PROCEDURE ANNULEROPERATION (IdOpt INTEGER)  
IS
V_Value number;
V_Inverse number;
V_IdCompte number;
BEGIN
SELECT O.MontantOperation INTO V_Value 
FROM OPERATION O
WHERE IdOpt=IdOperation;

SELECT O.IdCompte INTO V_IdCompte
FROM OPERATION O
WHERE IdOpt=IdOperation;

V_Inverse := -V_Value;

INSERT INTO OPERATION (IdOperation, DateOperation, MontantOperation, IdCompte)
VALUES (SeqIdOperation.nextval, SYSDATE, V_Inverse, V_IdCompte);

END;
/

CREATE OR REPLACE PROCEDURE MAJDECOUVERTAUTORISE(V_Idcompte INTEGER, Value NUMBER) 
IS 
BEGIN
UPDATE COMPTE SET DecouvertAutorise=Value WHERE IdCompte=V_IdCompte;
END;
/

CREATE OR REPLACE PROCEDURE MAJMONTANTOPERATION(V_Idoperation INTEGER, V_Value NUMBER) 
IS
V_IdCompte number;
BEGIN
SELECT O.IdCompte INTO V_IdCompte
FROM OPERATION O
WHERE O.IdOperation=V_Idoperation;

ANNULEROPERATION(V_Idoperation);
AJOUTNOUVOPERATION(V_IdCompte, V_Value);
END;
/

CREATE OR REPLACE PROCEDURE FAIRETRANSFERTCOMPTE(CptOrig INTEGER, CptDest INTEGER, Value NUMBER)
IS
V_Inverse number;
BEGIN
V_Inverse := -Value;
AJOUTNOUVOPERATION(CptOrig,V_Inverse);
AJOUTNOUVOPERATION(CptDest, Value);
END;
/

CREATE OR REPLACE FUNCTION BANQUEOPERATION(Idopt INTEGER) RETURN VARCHAR
IS
V_LibelleBanque VARCHAR(50);
BEGIN
SELECT B.LibelleBanque INTO V_LibelleBanque
FROM (OPERATION O INNER JOIN COMPTE C ON O.IdCompte=C.IdCompte)INNER JOIN BANQUE B ON C.IdBanque=B.IdBanque
WHERE Idopt=O.IdOperation;
RETURN V_LibelleBanque;
END;
/

CREATE OR REPLACE FUNCTION SOLDECOMPTE(Cpt INTEGER) RETURN NUMBER  
IS
V_Solde number;
BEGIN
SELECT C.SoldeCompte INTO V_Solde
FROM COMPTE C
WHERE C.IdCompte=Cpt;
RETURN V_Solde;
END;
/


CREATE OR REPLACE TRIGGER EPARGNE_NEGATIF
BEFORE INSERT ON OPERATION
FOR EACH ROW
    DECLARE
V_Type VARCHAR(30);
V_Solde NUMBER;
BEGIN

SELECT T.LibelleTypeCompte INTO V_Type FROM COMPTE C INNER JOIN TYPECOMPTE T ON C.IdTypeCompte=T.IdTypeCompte WHERE C.IdCompte=:NEW.IdCompte;
SELECT SoldeCompte INTO V_Solde FROM COMPTE WHERE IdCompte=:NEW.IdCompte;

V_Solde:=V_Solde + :NEW.MontantOperation ;
IF(V_Type='Epargne' AND V_Solde<0) THEN
RAISE_APPLICATION_ERROR (-20001, 'Erreur : Le solde d’épargne ne peut pas être négatif');
END IF;
END;
/



CREATE OR REPLACE TRIGGER CALCULSOLDE
AFTER INSERT ON OPERATION
FOR EACH ROW
DECLARE
V_Solde NUMBER;
V_Decouvert NUMBER;
V_Libelle VARCHAR(30);
BEGIN
UPDATE COMPTE SET SoldeCompte=SoldeCompte + :NEW.MontantOperation WHERE IdCompte=:NEW.IdCompte;

SELECT SoldeCompte INTO V_Solde FROM COMPTE WHERE IdCompte=:NEW.IdCompte;

SELECT DecouvertAutorise INTO V_Decouvert FROM COMPTE WHERE IdCompte=:NEW.IdCompte;

SELECT LibelleCompte INTO V_Libelle FROM COMPTE WHERE IdCompte=:NEW.IdCompte;

DELETE AUDITDECOUVERT WHERE IdCompte=:NEW.IdCompte;
IF (V_Solde<(0-V_Decouvert)) THEN
INSERT INTO AUDITDECOUVERT (IdAudit, IdCompte, LibelleCompte,SoldeCompte,DecouvertAutorise,Depassement,IdDerniereOperation) VALUES(SeqIdAudit.nextval, :NEW.IdCompte, V_Libelle, V_Solde, V_Decouvert, ABS(V_Solde+V_Decouvert), :NEW.IdOperation);
END IF;
END;
/





CREATE OR REPLACE VIEW V_CONSULTERCOMPTE(IdCompte, LibelleCompte, LibelleType, Solde)
AS
SELECT C.IdCompte, C.LibelleCompte, T.LibelleTypeCompte, C.SoldeCompte
FROM COMPTE C INNER JOIN TYPECOMPTE T ON C.IdTypeCompte=T.IdTypeCompte;
/


CREATE TRIGGER T_V_CONSULTERCOMPTE
INSTEAD OF INSERT OR UPDATE OR DELETE ON V_CONSULTERCOMPTE
FOR EACH ROW
BEGIN
RAISE_APPLICATION_ERROR (-20001, 'Action non autorisée');
END;
/


CREATE OR REPLACE VIEW V_CONSULTERDECOUVERT(IdCompte,LibelleCompte,LibelleType,Solde, Depassement)
AS
SELECT A.IdCompte, A.LibelleCompte, VC.LibelleType, A.SoldeCompte, A.Depassement
FROM AUDITDECOUVERT A INNER JOIN V_CONSULTERCOMPTE VC ON A.IdCompte=VC.IdCompte;
/

CREATE TRIGGER T_V_CONSULTERDECOUVERT
INSTEAD OF INSERT OR UPDATE OR DELETE ON V_CONSULTERDECOUVERT
FOR EACH ROW
BEGIN
RAISE_APPLICATION_ERROR (-20001, 'Action non autorisée');
END;
/

CREATE OR REPLACE VIEW V_CONSULTEROPERATION(IdOperation, DateOperation, MontantOperation)
AS
SELECT O.IdOperation, O.DateOperation, O.MontantOperation
FROM OPERATION O;
/

CREATE TRIGGER T_V_CONSULTEROPERATION
INSTEAD OF INSERT OR UPDATE OR DELETE ON V_CONSULTEROPERATION
FOR EACH ROW
BEGIN
RAISE_APPLICATION_ERROR (-20001, 'Action non autorisée');
END;
/









